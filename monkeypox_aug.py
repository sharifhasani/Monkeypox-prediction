# -*- coding: utf-8 -*-
"""Monkeypox-AUG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KIACYbu0k_4MV8t0Us0BFGipdQpXIavT

# import libraries
"""

from glob import glob
import cv2
from matplotlib import pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from keras.applications.densenet import DenseNet169
from tensorflow.keras.applications import VGG16, VGG19, EfficientNetB4
from sklearn.model_selection import cross_validate, KFold
from keras.losses import SparseCategoricalCrossentropy, CategoricalCrossentropy
from xgboost import XGBClassifier
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score,\
    confusion_matrix, f1_score, precision_score, recall_score, roc_curve, auc
from google.colab import drive

"""# Get Dataset

Download dataset first time and save to google drive
"""

# drive.mount('/content/drive')
# ! wget -P /content/drive/MyDrive https://github.com/muhammedtalo/COVID-19/archive/refs/heads/master.zip
# ! unzip -q "/content/drive/MyDrive/Source/DeepLearning/Monkeypox /Dataset/Monkeypox-Dataset.zip" -d "/content/drive/MyDrive/Source/DeepLearning/Monkeypox /Dataset/Extract"

"""run this cell when dataset exist in google drive"""

drive.mount('/content/drive')

"""# Load Data

load images directory
"""

images_path = {}
images_path["MonkeyPox"] = glob(
    "/content/drive/MyDrive/Source/DeepLearning/Monkeypox/Dataset/Extract"\
    "/Augmented Images/Augmented Images/Monkeypox_augmented/*.png")
images_path["MonkeyPox"] += glob(
    "/content/drive/MyDrive/Source/DeepLearning/Monkeypox/Dataset/Extract"\
    "/Augmented Images/Augmented Images/Monkeypox_augmented/*.jpeg")
images_path["MonkeyPox"] += glob(
    "/content/drive/MyDrive/Source/DeepLearning/Monkeypox/Dataset/Extract"\
    "/Augmented Images/Augmented Images/Monkeypox_augmented/*.jpg")

images_path["Others"] = glob(
    "/content/drive/MyDrive/Source/DeepLearning/Monkeypox/Dataset/Extract"\
    "/Augmented Images/Augmented Images/Others_augmented/*.png")
images_path["Others"] += glob(
    "/content/drive/MyDrive/Source/DeepLearning/Monkeypox/Dataset/Extract"\
    "/Augmented Images/Augmented Images/Others_augmented/*.jpeg")
images_path["Others"] += glob(
    "/content/drive/MyDrive/Source/DeepLearning/Monkeypox/Dataset/Extract"\
    "/Augmented Images/Augmented Images/Others_augmented/*.jpg")


print(images_path["MonkeyPox"])
print(images_path["Others"])


images_class = {
    "MonkeyPox": 0,
    "Others": 1,
}

X = []
Y = []

for label in images_path:
    for image_path in images_path[label]:
        image = cv2.imread(image_path)
        image = cv2.resize(image,(224, 224))
        X.append(image)
        Y.append(images_class[label])

plt.imshow(X[0])
plt.show()

print(np.array(X).shape)
print(np.array(Y).shape)
plt.imshow(X[100])

"""# Build model

build model and get features
"""

x = np.array(X)
y = np.array(Y)

# initial pre trained model
pre_trained_models = {}
pre_trained_models["VGG19"] = EfficientNetB4(include_top=False,
                                             input_shape=(224, 224, 3),
                                             pooling="avg")

"""# Split train and test data

slpit and make flatten features
"""

features = pre_trained_models["VGG19"].predict(x)
X_train, X_test, Y_train, Y_test = train_test_split(features, y,
                                                    test_size=0.2,
                                                    random_state=934)

"""# Classification

initial XGBoost classifier
"""

result = {}

XGB_Classifier = XGBClassifier(learning_rate=0.36, n_estimator=500)

"""fit XGBoost classifier"""

XGB_Classifier.fit(X_train, Y_train)

Y_pred = XGB_Classifier.predict(X_test)

"""print result"""

result["Accuracy score"] = accuracy_score(Y_test, Y_pred)
result["confusion matrix"] = confusion_matrix(Y_test, Y_pred)
result["f1 score"] = f1_score(Y_test, Y_pred, average="macro")
result["precision score"] = precision_score(Y_test, Y_pred, average="macro")
result["Sensitivity"] = result["confusion matrix"][0,0] / (result["confusion matrix"][0,0] + result["confusion matrix"][0,1])
result["Specifity"] = result["confusion matrix"][1,1] / (result["confusion matrix"][1,0] + result["confusion matrix"][1,1])

print(f"\n============")
print(f"\nAccuracy score : ", result["Accuracy score"])
print(f"\nconfusion matrix : \n", result["confusion matrix"])
print(f"\nf1 score : ", result["f1 score"])
print(f"\nprecision score : ", result["precision score"])
print(f"\nSpecifity : ", result["Specifity"])
print(f"\nSensitivity : ", result["Sensitivity"])